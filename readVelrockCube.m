function [Vol Specs] = readVelrockCube(filename, plotVolume)
%readVelrockCube reads cube information generated from VelRock.
%
% [Vol Specs] = readVelrockCube(filename, [plotVolume]) reads cube data 
% from {filename} generated by VelRock. The data is stored in a 3D matrix 
% {Vol} and information about the data is stored in {Specs}. If 
% {plotVolume} is set to 1 then the data will be plotted using 
% volume_browser.
%
% filename                  - filename to cube data
% plotVolume                - flag, 1: plot using volume_browser,
%                                   0, any other value or undefined: 
%                                           do nothing
%
%_______________________________________________________________________
% Examples
% filename = 'myCube.dat';
% [Vol Specs] = readVelrockCube(filename);
% [Vol Specs] = readVelrockCube(filename, 1);
%_______________________________________________________________________
% Erling Hugo Jensen, 29/02/08

error(nargchk(1,2,nargin,'struct'));

%% Init
Specs           = {};
Specs.gfxHandle = [];
Specs.AxisInfo  = {};
Specs.nrOfTicks = 4;
Specs.filename  = filename;

%% Open file
fid = fopen(filename);

%% Read header
fname               = ddewhite(fgets(fid));
tmpVar              = fscanf(fid, '%f', 1);
tmpVar              = fscanf(fid, '%f', 3);
Specs.NrOfSamples   = fscanf(fid, '%f');
Vol                 = zeros(Specs.NrOfSamples');

%% Read axis information
for i = 1 : length(Specs.NrOfSamples)
    sl                              = multiSpaceSplitStr(ddewhite(fgets(fid)));
    Specs.AxisInfo{i}.description   = sl{1};
    if (length(sl) == 2)
        Specs.AxisInfo{i}.unit      = sl{2};        
    else
        Specs.AxisInfo{i}.unit      = [];
    end
    Specs.AxisInfo{i}.Values        = fscanf(fid, '%f');
end

%% Read property data
sl                                  = multiSpaceSplitStr(ddewhite(fgets(fid)));
Specs.dataDescription               = sl{1};
if (length(sl) == 2)
    Specs.dataUnit                  = sl{2};
else
    Specs.dataUnit                  = [];
end
for i = 1 : Specs.NrOfSamples(3)
    Vol(:,:,i)  = fscanf(fid, '%f', [Specs.NrOfSamples(1) Specs.NrOfSamples(2)]);
end
VolBrowse = permute(Vol, [2 1 3]);

%% Checks if data should be displayed using volume_browser
if ((nargin >= 2) && (plotVolume == 1))
    %	Axis annotation is specified
    [xLabel RawPropertyXML] = getPropertyLabel([], Specs.AxisInfo{1}.description);
    yLabel                  = getPropertyLabel(RawPropertyXML, Specs.AxisInfo{2}.description);
    zLabel                  = getPropertyLabel(RawPropertyXML, Specs.AxisInfo{3}.description);
    
    Options.xinfo           = {xLabel, Specs.AxisInfo{1}.unit, Specs.AxisInfo{1}.description};
    Options.yinfo           = {yLabel, Specs.AxisInfo{2}.unit, Specs.AxisInfo{2}.description};
    Options.zinfo           = {zLabel, Specs.AxisInfo{3}.unit, Specs.AxisInfo{3}.description}; 
    Options.plot_label      = [Specs.dataDescription ' cube'];
    Options.plot_title      = [Specs.dataDescription ' cube'];

    volume_browser(VolBrowse, Options);
    Specs.gfxHandle         = gcf;   
    Specs.axesHandle        = get(Specs.gfxHandle, 'CurrentAxes');
    AxesLabelList           = {'X', 'Y', 'Z'};
    Specs.nrOfTicks         = 4;
    for i = 1 : length(AxesLabelList);
        Ticker = (1:(Specs.NrOfSamples(i)-1)/Specs.nrOfTicks:Specs.NrOfSamples(i));
        set(Specs.axesHandle, [AxesLabelList{i} 'Tick'], Ticker);
        set(Specs.axesHandle, [AxesLabelList{i} 'TickLabel'], ...
            (Specs.AxisInfo{i}.Values(1): ...
            (Specs.AxisInfo{i}.Values(end)-Specs.AxisInfo{i}.Values(1))/Specs.nrOfTicks: ...
            Specs.AxisInfo{i}.Values(end)));
    end
end
    
